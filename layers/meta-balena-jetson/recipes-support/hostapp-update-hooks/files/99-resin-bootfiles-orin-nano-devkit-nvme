#!/bin/sh
set -o errexit

# Script which writes the appropriate
# device tree with embedded cmdline
# and updates the kernel, as well as
# the rest of the bootloader binaries

. /usr/libexec/os-helpers-fs
. /usr/sbin/balena-config-vars

efivars_dir="/sys/firmware/efi/efivars/"
# See https://github.com/OE4T/meta-tegra/blob/master/recipes-bsp/tools/setup-nv-boot-control/setup-nv-boot-control.sh.in
platform_spec_efivar="${efivars_dir}TegraPlatformSpec-781e084c-a330-417c-b678-38e696380cb9"
platform_compat_spec_efivar="${efivars_dir}TegraPlatformCompatSpec-781e084c-a330-417c-b678-38e696380cb9"
os_indications_efivar="${efivars_dir}OsIndications-8be4df61-93ca-11d2-aa0d-00e098032b8c"
tmp_file="/tmp/platformspecfile.bin"
active_sysroot="/mnt/sysroot/active/current/boot/"
jp5_default_dtb_name="tegra234-p3767-0003-p3768-0000-a0.dtb"
jp6_default_dtb_name="tegra234-p3768-0000+p3767-0005-nv.dtb"

device_type="jetson-orin-nano-devkit"

source /usr/bin/uefi_common.func

DURING_UPDATE=${DURING_UPDATE:-0}
bootloader_device="/dev/mtdblock0"
internal_storage="/dev/nvme0n1"
use_capsule=1

bootloader_blob="/opt/tegra-binaries/TEGRA_BL_Orin_Nano.Cap.gz"

boardspec=$(tegra-boardspec 2>/dev/null)
TegraPlatformSpec="${boardspec}-${device_type}-"
compatspec=$(echo "$boardspec" | gen_compat_spec)
TegraPlatformCompatSpec="${compatspec}-${device_type}-"

info_log()
{
    echo "[INFO] $@"
}

write_jetson_update_efivars() {
    info "Writing of jetson efivars triggered from old OS hook"
    if [ -d $efivars_dir ]; then
        # If the file already exists, writing to it will fail
        # causing the entire hook to fail
        if [ ! -e ${platform_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "${TegraPlatformSpec}" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_spec_efivar}
            info "PlatformSpec variable created"
        else
            info "PlatformSpec variable already exists"
        fi

        if [ ! -e ${platform_compat_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "${TegraPlatformCompatSpec}" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_compat_spec_efivar}
            info "PlatformCompatSpec variable created"
        else
            info "PlatformCompatSpec variable already exists"
        fi

        printf "%b" '\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00' > ${tmp_file}
        dd if=${tmp_file} of=${os_indications_efivar}
        info "OsIndications variable written"
    else
        info "sysfs not accessible!"
        return 1
    fi

    return 0
}

copy_jp5_dtb() {
    if [ -f ${active_sysroot}${jp5_default_dtb_name} ]; then
        cp ${active_sysroot}${jp5_default_dtb_name} ${active_sysroot}${jp6_default_dtb_name} || true
       info "Copied old dtb under new name"
    else
        info "Jetpack 5 default device-tree not found"
    fi
}


# While the UEFI firmware accepts loading the uefi bootloader
# from any partition, it doesn't do the same for
# the update capsule, which needs to reside on a partition
# that has the boot,esp flags set. Since we originally
# integrated this device type using the default xml
# which sets these flags for the 'esp' partition only and
# we preferred to include the efi bootloader in our
# own 'resin-boot' partition instead, we do not have the flags
# set by the nvidia flashing tools and have to
# set them now. This way, on the next update the
# UEFI firmware will not load the UEFI bootloader
# from the boot partition, and instead will read the
# capsule and perform the update.
check_and_update_esp_flags() {
    data_type="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
    esp_type="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
    esp_index="10"
    resin_boot_index="14"

    esp_part_type=$(sfdisk --part-type $internal_storage $esp_index)
    resin_boot_part_type=$(sfdisk --part-type $internal_storage $resin_boot_index)

    if [ "$esp_type" = "$esp_part_type" ]; then
        info_log "esp partition has esp flag, will be cleared"
        sfdisk --part-type $internal_storage $esp_index $data_type
        sync
    else
        info_log "no type change needed on esp partition"
    fi

    if [ "$resin_boot_part_type" != "$esp_type" ]; then
        info_log "resin-boot partition does not have esp type, must be added"
        sfdisk --part-type $internal_storage $resin_boot_index $esp_type
        sync
    else
        info_log "no type change needed on resin-boot partition"
    fi
}

info "Bootloader blob is $bootloader_blob"

do_capsule_update() {
    # Unzip capsule to the boot partition
    info "Will extract UEFI Capsule..."
    mkdir -p /mnt/boot/EFI/UpdateCapsule/
    gunzip -k -c ${bootloader_blob} | dd of=/mnt/boot/EFI/UpdateCapsule/TEGRA_BL.Cap
    sync
    info "Extracted UEFI Capsule."
}

info "Pre-update A/B slots info:"
info "=========================="
/usr/sbin/nvbootctrl dump-slots-info || true
info "=========================="

do_capsule_update
check_and_update_esp_flags

# In 36.3 we need to unload the tegra
# qspi drivers, otherwise the board will hang
# when trying to write the Compat UEFI variables
unload_spi_drivers() {
spi_modules=("spi_tegra210_quad" "spi_tegra114")

for spi_module in "${spi_modules[@]}"
do
    if lsmod | grep -q $spi_module ; then
        echo "Unloading $spi_module"
        rmmod $spi_module

        if [ $? -eq 0 ]; then
            echo "Unloaded $spi_module"
        fi
    fi
done
}

# Save next active boot slot
# so it can be processed by the UEFI bootloader
process_bootslot_file() {
    if [ "$DURING_UPDATE" = "1" ]; then
        bootslotchar=$(nvbootctrl dump-slots-info | grep Active | awk '{print $4}')

        echo "bootslotchar is $bootslotchar"

        if [ "$bootslotchar" = "A" ]; then
            # next slot will be B
            nextbootslot="1";
        else
            # next slot will be A
            nextbootslot="0";
        fi

        echo "Next boot slot is ${nextbootslot}. Will be written to bootslot.env"
        echo "bootslot=${nextbootslot}" > /mnt/boot/bootslot.env
        cat /mnt/boot/bootslot.env
    else
        echo "During rollback, will remove bootslot.env"
        rm -rf /mnt/boot/bootslot.env || true
    fi
}

process_bootslot_file
copy_jp5_dtb


unload_spi_drivers

if [ $(ls -l ${efivars_dir}OsIndications* | wc -l) -gt 0 ]; then
    write_jetson_update_efivars
else
    echo "efivars directory is is empty"
fi
