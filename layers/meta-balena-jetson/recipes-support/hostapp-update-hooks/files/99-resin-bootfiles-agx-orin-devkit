#!/bin/sh
set -o errexit

# Script which writes the appropriate
# device tree with embedded cmdline
# and updates the kernel, as well as
# the rest of the bootloader binaries
. /usr/libexec/os-helpers-fs
. /usr/sbin/balena-config-vars
source /usr/bin/uefi_common.func

DURING_UPDATE=${DURING_UPDATE:-0}
bootloader_blob="/opt/tegra-binaries/TEGRA_BL_3701.Cap.gz"
bootloader_device="/dev/mtdblock0"
internal_storage="/dev/mmcblk0"
use_capsule=1
efivars_dir="/sys/firmware/efi/efivars/"
# See https://github.com/OE4T/meta-tegra/blob/master/recipes-bsp/tools/setup-nv-boot-control/setup-nv-boot-control.sh.in
platform_spec_efivar="${efivars_dir}TegraPlatformSpec-781e084c-a330-417c-b678-38e696380cb9"
platform_compat_spec_efivar="${efivars_dir}TegraPlatformCompatSpec-781e084c-a330-417c-b678-38e696380cb9"
os_indications_efivar="${efivars_dir}OsIndications-8be4df61-93ca-11d2-aa0d-00e098032b8c"
tmp_file="/tmp/platformspecfile.bin"
device_type="jetson-agx-orin-devkit"
boardspec=$(tegra-boardspec 2>/dev/null)
TegraPlatformSpec="${boardspec}-${device_type}-"
compatspec=$(echo "$boardspec" | gen_compat_spec)
TegraPlatformCompatSpec="${compatspec}-${device_type}-"

write_jetson_update_efivars() {
    info "Writing of jetson efivars triggered from old OS hook"
    if [ -d $efivars_dir ]; then
        # If the file already exists, writing to it will fail
        # causing the entire hook to fail
        if [ ! -e ${platform_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "${TegraPlatformSpec}" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_spec_efivar}
            info "PlatformSpec variable created"
        else
            info "PlatformSpec variable already exists"
        fi

        if [ ! -e ${platform_compat_spec_efivar} ]; then
            printf "\x07\x00\x00\x00" > ${tmp_file}
            printf "%s" "${TegraPlatformCompatSpec}" >> ${tmp_file}
            dd if=${tmp_file} of=${platform_compat_spec_efivar}
            info "PlatformCompatSpec variable created"
        else
            info "PlatformCompatSpec variable already exists"
        fi

        printf "%b" '\x07\x00\x00\x00\x04\x00\x00\x00\x00\x00\x00\x00' > ${tmp_file}
        dd if=${tmp_file} of=${os_indications_efivar}
        info "OsIndications variable written"
    else
        fail "sysfs not accessible!"
        return 1
    fi

    return 0
}

check_disable_xudc()
{
    extlinuxfile="/mnt/sysroot/active/current/boot/extlinux/extlinux.conf"

    if [ -e $extlinuxfile ]; then
       if grep -q "l4tver=35.1.0" "${extlinuxfile}"; then
            info "Old root is running L4T 35.1.0, will disable tegra-xudc from the device-trees"
            use_capsule=0
            for dtbfile in `find /mnt/sysroot/active/ -name "*.dtb" -type f`; do
                info "Disabling tegra-xudc in $dtbfile ...";
                fdtput -t s $dtbfile /xudc status disabled
                fdtput -t s $dtbfile / nvidia,dtsfilename "tegra234-p3701-0000-p3737-0000_xudc_disabled.dts"
                current_xudc_status=$(fdtget $dtbfile /xudc status)
                info "$dtbfile now has xudc $current_xudc_status"
            done
        else
            info "extlinux file not found in old rootfs"
        fi;
    fi;
}

check_and_update_esp_flags() {
    esp_type="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
    esp_index="5"
    resin_boot_index="6"

    esp_part_type=$(sfdisk --part-type $internal_storage $esp_index)
    resin_boot_part_type=$(sfdisk --part-type $internal_storage $resin_boot_index)

    if [ "$esp_type" != "$esp_part_type" ]; then
        info "type change needed on esp partition"
	sfdisk --part-type $internal_storage $esp_index $esp_type
	sync
    else
        info "ok - esp partition has esp flag"
    fi

    if [ "$resin_boot_part_type" != "$esp_type" ]; then
        info "resin-boot partition does not have esp type, must be added"
        sfdisk --part-type $internal_storage $resin_boot_index $esp_type
        sync
    else
        info "no type change needed on resin-boot partition"
    fi
}

check_disable_xudc

info "Bootloader blob is $bootloader_blob"

# This allows for writing UEFI variables
# in L4T 36.3, in the case where the hook
# is triggered by the rollback-health script
unload_spi_drivers() {
spi_modules=("spi_tegra210_quad" "spi_tegra114")

for spi_module in "${spi_modules[@]}"
do
    if lsmod | grep -q $spi_module ; then
        echo "Unloading $spi_module"
        rmmod $spi_module

        if [ $? -eq 0 ]; then
            echo "Unloaded $spi_module"
        fi
    fi
done
}

unload_spi_drivers
do_capsule_update() {
    esp_dev=$(get_state_path_from_label "esp")
    esp_tmp_dir="/tmp/esp/"
    capsule_dir="/EFI/UpdateCapsule/"
    /usr/sbin/mkfs.vfat ${esp_dev}
    mkdir -p ${esp_tmp_dir}
    mount ${esp_dev} ${esp_tmp_dir}
    mkdir -p "${esp_tmp_dir}${capsule_dir}"
    # Unzip capsule to the esp partition, because the uncompressed capsule size
    # is too large for the boot partition
    mkdir -p "${esp_tmp_dir}${capsule_dir}"
    gunzip -k -c ${bootloader_blob} | dd of="${esp_tmp_dir}${capsule_dir}TEGRA_BL.Cap"
    sync
    umount $esp_dev
    rm -rf $esp_tmp_dir || true
    write_jetson_update_efivars
}

do_legacy_update() {
    bootloader_blob="/opt/tegra-binaries/boot0.img.gz"
    existing_bootloader_md5sum=$(dd if=$bootloader_device bs=1M status=none | md5sum | awk '{print $1}')
    update_bootloader_md5sum=$(md5sum $bootloader_blob | awk '{print $1}')

    if [ ! "$existing_bootloader_md5sum" = "$update_bootloader_md5sum" ]; then
        info "Will clear bootloader device before the update"
        flash_erase /dev/mtd0 0 0 || true
        info "Updating bootloader device"
        gunzip -k -c $bootloader_blob | dd of=$bootloader_device
        info "Updated bootloader device"
    else
        info "No need to update bootloader device"
    fi

    # Sync internal memory
    sync ${bootloader_device}
}

info "Pre-update A/B slots info:"
info "=========================="
/usr/sbin/nvbootctrl dump-slots-info || true
info "=========================="

if [ $use_capsule -eq 1 ]; then
    do_capsule_update
else
    do_legacy_update
fi

check_and_update_esp_flags
