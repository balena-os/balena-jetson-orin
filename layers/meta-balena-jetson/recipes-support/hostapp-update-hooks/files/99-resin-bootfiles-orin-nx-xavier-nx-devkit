#!/bin/sh
set -o errexit

# Script which writes the appropriate
# device tree with embedded cmdline
# and updates the kernel, as well as
# the rest of the bootloader binaries

. /usr/libexec/os-helpers-fs
. /usr/sbin/balena-config-vars

DURING_UPDATE=${DURING_UPDATE:-0}
bootloader_device="/dev/mtdblock0"
internal_storage="/dev/nvme0n1"
use_capsule=1

bootloader_blob="/opt/tegra-binaries/TEGRA_BL_Orin_NX.Cap.gz"

info_log()
{
    echo "[INFO] $@"
}

# While the UEFI firmware accepts loading the uefi bootloader
# from any partition, it doesn't do the same for
# the update capsule, which needs to reside on a partition
# that has the boot,esp flags set. Since we originally
# integrated this device type using the default xml
# which sets these flags for the 'esp' partition only and
# we preferred to include the efi bootloader in our
# own 'resin-boot' partition instead, we do not have the flags
# set by the nvidia flashing tools and have to
# set them now. This way, on the next update the
# UEFI firmware will not load the UEFI bootloader
# from the boot partition, and instead will read the
# capsule and perform the update.
check_and_update_esp_flags() {
    data_type="EBD0A0A2-B9E5-4433-87C0-68B6B72699C7"
    esp_type="C12A7328-F81F-11D2-BA4B-00A0C93EC93B"
    esp_index="5"
    resin_boot_index="6"

    esp_part_type=$(sfdisk --part-type $internal_storage $esp_index)
    resin_boot_part_type=$(sfdisk --part-type $internal_storage $resin_boot_index)

    if [ "$esp_type" = "$esp_part_type" ]; then
        info_log "esp partition has esp flag, will be cleared"
        sfdisk --part-type $internal_storage $esp_index $data_type
        sync
    else
        info_log "no type change needed on esp partition"
    fi

    if [ "$resin_boot_part_type" != "$esp_type" ]; then
        info_log "resin-boot partition does not have esp type, must be added"
        sfdisk --part-type $internal_storage $resin_boot_index $esp_type
        sync
    else
        info_log "no type change needed on resin-boot partition"
    fi
}

info "Pre-update A/B slots info:"
info "=========================="
/usr/sbin/nvbootctrl dump-slots-info || true
info "=========================="

info "Bootloader blob is $bootloader_blob"

do_capsule_update() {
    # Unzip capsule to the boot partition
    mkdir -p /mnt/boot/EFI/UpdateCapsule/
    gunzip -k -c ${bootloader_blob} | dd of=/mnt/boot/EFI/UpdateCapsule/TEGRA_BL.Cap
    sync

    if [ $(ls -l ${efivars_dir}OsIndications* | wc -l) -gt 0 ]; then
        info "Once a release that bindmounts sysfs is available in production, the efi vars can be updated from here instead of the after hook"
    else
        # Once the above condition is met, we could drop the after hook and use the legacy update mode if the base release is older
        # than the one with sysfs bindmount in hostapp-update
        info "Sysfs directory exists, but is not bindmounted. After hook will write the efi variables from the old OS"
    fi
}

do_capsule_update
check_and_update_esp_flags
